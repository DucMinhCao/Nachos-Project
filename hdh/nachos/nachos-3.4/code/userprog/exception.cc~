// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------
void IncreasePC()
{
	int counter = machine->ReadRegister(PCReg);
   	machine->WriteRegister(PrevPCReg, counter);
    	counter = machine->ReadRegister(NextPCReg);
    	machine->WriteRegister(PCReg, counter);
   	machine->WriteRegister(NextPCReg, counter + 4);
}

char* User2System(int virtAddr,int limit)
{
	int i;// index
	int oneChar;
	char* kernelBuf = NULL;
	kernelBuf = new char[limit +1]; //need for terminal string
	if (kernelBuf == NULL)
		return kernelBuf;
	memset(kernelBuf,0,limit+1);
	for (i = 0 ; i < limit ;i++)
	{
		machine->ReadMem(virtAddr+i,1,&oneChar);
		kernelBuf[i] = (char)oneChar;
		if (oneChar == 0)
		break;
	}
	return kernelBuf;
}

int System2User(int virtAddr,int len,char* buffer)
{
	if (len < 0) return -1;
	if (len == 0)return len;
	int i = 0;
	int oneChar = 0 ;
	do {
		oneChar= (int) buffer[i];
		machine->WriteMem(virtAddr+i,1,oneChar);
		i++;
	} while(i < len && oneChar != 0);
	return i;
} 

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);
    switch(which)
    {
	case NoException:
		//return;
		break;

	case PageFaultException:
		DEBUG('a',"\n No valid translation found");
		printf("\n\n No valid translation found");
		interrupt->Halt();
		break;

	case ReadOnlyException:
		DEBUG('a',"\n Write attempted to page marked read-only");
		printf("\n\n Write attempted to page marked read-only");
		interrupt->Halt();
		break;

	case BusErrorException:
		DEBUG('a',"\n Translation resulted in an invalid physical address");
		printf("\n\n Translation resulted in an invalid physical address");
		interrupt->Halt();
		break;

	case AddressErrorException:
		DEBUG('a',"\n Unaligned reference or one that was beyond the end of the address space");
		printf("\n\n Unaligned reference or one that was beyond the end of the address space");
		interrupt->Halt();
		break;

	case OverflowException:
		DEBUG('a',"\n Integer overflow in add or sub.");
		printf("\n\n Integer overflow in add or sub.");
		interrupt->Halt();
		break;

	case IllegalInstrException:
		DEBUG('a',"\n Unimplemented or reserved instr.");
		printf("\n\n Unimplemented or reserved instr.");
		interrupt->Halt();
		break;
	case NumExceptionTypes:
		DEBUG('a',"\n Number Exception type.");
		printf("\n\n Number Exception type.");
		interrupt->Halt();
		break;

	case SyscallException:
		switch (type)
		{
			case SC_Halt:
				DEBUG('a',"\nShutdown, initiated by user program. ");
				printf("\nShutdown, initiated by user program. ");
				interrupt->Halt();
				break;
			case SC_ReadInt:
				{
					// Input: K co
                    			// Output: Tra ve so nguyen doc duoc tu man hinh console.
                    			// Chuc nang: Doc so nguyen tu man hinh console.
					int number = 0;
					int nDigit = 0;
					int i;
					char *buffer = new char[255];
					nDigit = gSynchConsole->Read(buffer, 255); //so ky tu doc duoc
					i = (buffer[0] == '-') ? 1 : 0;
					for (;i < nDigit; i++)
					{
						if(buffer[i] == '.') //50.00000000 van la so nguyen
						{
							int j = i + 1;
							for (;j < nDigit; j++)
							{
								if (buffer[j] != '0')
								{
									printf("Please Input Integer Number !!! Not Float");
									IncreasePC();
									return;
								}
							}
						}
						else if (buffer[i] < '0' || buffer[i] > '9')
						{
							printf("Invalid Input !! Please Input Integer Number.");
							machine->WriteRegister(2, 0);
							IncreasePC();
							return;
							
						}
						number = number*10 + (int)buffer[i] - 48;
					}
					number = (buffer[0] == '-') ? (-1*number) : (number);
					machine->WriteRegister(2, number);
					delete buffer;
				}
				break;
			case SC_PrintInt:
				{
					// Input: mot so integer
                    			// Output: khong co 
                    			// Chuc nang: In so nguyen len man hinh console
					int number = machine->ReadRegister(4);
					char *buffer;
					buffer = new char[256];
					bool isNegative = false;
					int firstNumIndex = 0;
					int nDigit = 0;
					int temp;
					
					if (number == 0)
					{
						gSynchConsole->Write("0",1);
						IncreasePC();
						return;
					}

					if (number < 0)
					{
						number = number*-1;
						isNegative = true;
						firstNumIndex = 1;
					}
					
					temp = number;
					while(temp != 0)
					{
						nDigit++;
						temp = temp / 10;
					}				

					for (int i = firstNumIndex + nDigit - 1; i >= firstNumIndex; i--)
					{
						buffer[i] = (char) (number % 10) + '0';
						number = number / 10;
					}
					
					if(isNegative)
					{
						buffer[0] = '-';
						buffer[nDigit+1] = 0;
						gSynchConsole->Write(buffer,nDigit+1);
						delete buffer;
						IncreasePC();
						return;
					}
					buffer[nDigit] = 0;
					gSynchConsole->Write(buffer,nDigit);
					delete buffer;
				}
				break;
			case SC_ReadChar:
				{	
					//Input: Khong co
					//Output: Duy nhat 1 ky tu (char)
					//Cong dung: Doc mot ky tu tu nguoi dung nhap
					char *character = new char[255];
					int nChar = gSynchConsole->Read(character,255);

					if (nChar > 1)
					{
						printf("One Character Only !!");
						delete character;
						IncreasePC();
						return;
					}
					if (nChar == 0)
					{
						printf("Null Character !!");
						machine->WriteRegister(2,0);
						delete character;
						IncreasePC();
						return;
					}
					char res = character[0];
					machine->WriteRegister(2,res);
					delete character;
				}
				//break;
			case SC_PrintChar: 
				{
					// Input: Ki tu(char)
					// Output: Ki tu(char)
					// Cong dung: Xuat mot ki tu la tham so arg ra man hinh
					char c = (char) machine->ReadRegister(4);
					gSynchConsole->Write(&c,1);
				}
				break;
			case SC_ReadString:
				{
					// Input: Buffer(char*), do dai toi da cua chuoi nhap vao(int)
					// Output: Khong co
					// Cong dung: Doc vao mot chuoi voi tham so la buffer va do dai toi da
					char *res;
					int userAdd = machine->ReadRegister(4);
					int length = machine->ReadRegister(5);
					res = User2System(userAdd, length);
					gSynchConsole->Read(res, length);
					System2User(userAdd, length, res);
					delete res;
				}
				break;
			case SC_PrintString:
				{
					// Input: Buffer(char*)
					// Output: Chuoi doc duoc tu buffer(char*)
					// Cong dung: Xuat mot chuoi la tham so buffer truyen vao ra man hinh
					int virtAddr, length = 0;
					char *res;
					virtAddr = machine->ReadRegister(4);
					res = User2System(virtAddr, 255);
					while(res[length] != 0) 
					{
					length++;
					}
					gSynchConsole->Write(res, length + 1);
					delete res;
				}
			IncreasePC();
			return;
		}
	IncreasePC();
    }
}
